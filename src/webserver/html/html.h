/* this file is generated, do not edit something in here! */

// check this here!
// https://randomnerdtutorials.com/esp32-vs-code-platformio-spiffs/

#ifndef __HTML_H__
#define __HTML_H__

// maybe try this https://docs.platformio.org/en/latest/platforms/espressif32.html#embedding-binary-data

const char HTTP_CONTENT_TYPE_HTML[] = "text/html";
const char HTTP_CONTENT_TYPE_TEXT[] = "text/plain";
const char HTTP_CONTENT_TYPE_JSON[] = "application/json";

const char INDEX_HTML[] = "<!doctypehtml><style>body{background:#c3c3c3;font-size:40px}p{color:#ff7600;font-weight:bolder;font-size:60px}button{width:100%;min-height:80px;font-size:40px;border-radius:20px;margin-bottom:26px}</style><body style=width:80%;margin-left:10%><form method=GET><p>iizi wifi manager</p><span>hostname: {{hostname}}</span><br><span>wifi: {{wifi}}</span><br><span>ip: {{ip}}</span><br><br><button formaction=/wifi>manage your wifi connection</button><br><button formaction=/params>edit application parameters</button></form><form method=POST><br><button formaction=/close {{close_ap_btn_disabled}}>close AP</button><br><button formaction=/reset>reset device</button></form>";

const char WIFI_HTML[] = "<!doctypehtml><style>body{background:#c3c3c3;font-size:40px}p{color:#ff7600;font-weight:bolder;font-size:60px}#scanned_ssids > li{margin-bottom:22px}#scanned_ssids > li > .ssid{cursor:pointer;font-weight:bolder}button{width:100%}button,input{min-height:80px;font-size:40px;border-radius:10px}</style><body style=width:80%;margin-left:10%><p><span onclick=\"document.location = '/'\"style=cursor:pointer>< </span>wifi</p><button id=start_scan>start scan</button><ul id=scanned_ssids></ul><button onclick=clickSSID('')>add manual entry</button><div id=configured_ssids></div><button onclick=save() style=margin-bottom:44px;margin-top:22px>save</button><script>let host=\"\";let scanning=false;let configuredWifis=[];const MAX_WIFI_CREDENTIALS=4;const scannedSsidsUl=document.querySelector(\"#scanned_ssids\");const configuredSsidsDiv=document.querySelector(\"#configured_ssids\");const startScanBtn=document.querySelector(\"#start_scan\");startScanBtn?.addEventListener(\"click\",async()=>{if(scanning)return console.log(\"already scanning...\");console.log(\"start scanning..\");setScanning(true);await fetch(host+ \"/wifi-start-scan\",{method:\"post\"}).catch(()=>undefined);console.log(\"start timeout..\");await new Promise(a=>{setTimeout(()=>{console.log(\"start getting result..\");getWifiScanResult().then(()=>a())},10000)});setScanning(false)});const setScanning=a=>{startScanBtn.disabled=scanning=a===true};const collator=new Intl.Collator(\"en-US\");const compareStrings=(a,b)=>{if(typeof a===\"string\"&&typeof b===\"string\"){return collator.compare(b,a)};return b- a};const filterNetworks=a=>(a.filter(([b],c)=>a.findIndex(([d])=>d===b)===c).filter(([b])=>Boolean(b)).filter(([b,c])=>c>=-75));const buildNetworkList=a=>{if(!Array.isArray(a)||!a.length){return `please start a scan first..`};return (a.sort(([b],[c])=>b.localeCompare(c)).map(([b,c],d)=>{const e=`li_ssid_${d}`;return ` <li id=\"${e}\" onClick=\"clickSSID('${b}')\"><span class=\"ssid\">${b}</span></li>`}).join(\"\"))};const getWifiScanResult=()=>{console.log(\"getWifiScanResult\");return fetch(host+ \"/wifi-scan-results\",{}).then(a=>a.json()).then(a=>{console.log(a);const {networks:b}=a;scannedSsidsUl.innerHTML=buildNetworkList(filterNetworks(b))}).catch(a=>{console.warn(\"err occured..\",a);return undefined})};getWifiScanResult();const ssidChange=(a,b)=>{const c=document.querySelector(`#${b}`)?.value;if(c==null)return;const d=configuredWifis[a];if(d==null)return;const [e,f]=d;configuredWifis[a]=[c,f]};const passChange=(a,b)=>{const c=document.querySelector(`#${b}`)?.value;if(c==null)return;const d=configuredWifis[a];if(d==null)return;const [e]=d;configuredWifis[a]=[e,c]};const removeSSID=a=>{const b=configuredWifis[a];if(b==null)return;configuredWifis.splice(a,1);updateConfiguredWifiInputs()};const buildConfiguredWifiInputs=()=>configuredWifis.map(([a,b],c)=>{const d=`i_ssid_${c}`;const e=`i_pass_${c}`;return `<div style=\"display: flex; margin-top: 22px\"><div style=\"min-width: 90%; flex-direction: column\"><div style=\"display: flex; align-items: center\"><span style=\"width: 10%\">ssid</span><input style=\"width: 90%\" id=\"${d}\" onchange=\"ssidChange(${c}, '${d}')\" value=\"${a}\" /></div><div style=\"display: flex; align-items: center\"><span style=\"width: 10%\">pass</span><input style=\"width: 90%\" id=\"${e}\" onchange=\"passChange(${c}, '${e}')\" value=\"${b}\" /></div></div><button onclick=\"removeSSID(${c})\">X</button></div>`}).join(\"\");const updateConfiguredWifiInputs=()=>{configuredSsidsDiv.innerHTML=buildConfiguredWifiInputs()};const clickSSID=a=>{console.log(\"clickSSID\",a,configuredWifis.length);if(configuredWifis.length>=MAX_WIFI_CREDENTIALS)return;if(configuredWifis.find(([b])=>b===a)){return console.log(\"already added..\")};configuredWifis.push([a??\"\",\"\"]);updateConfiguredWifiInputs()};const save=()=>{console.warn(\"SAVE !!\",configuredWifis);return fetch(host+ \"/wifi-save\",{method:\"POST\",headers:{\"content-type\":\"application/json\"},body:JSON.stringify({creds:configuredWifis.map(([a,b])=>[a.trim(),b.trim()]).filter(([a])=>Boolean(a))})}).then(a=>{console.log(a);goBack()}).catch(a=>{console.warn(\"err occured..\",a);return undefined})};const fetchWifiCreds=()=>fetch(host+ \"/wifi-query\").then(a=>a.json()).then(a=>{console.log(\"fetchWifiCreds\",a);if(!a.credentials)return;const {credentials:b}=a;if(Array.isArray(b)){return b.slice(0,MAX_WIFI_CREDENTIALS)};return undefined}).catch(a=>{console.warn(\"err occured..\",a);return undefined});fetchWifiCreds().then(a=>{configuredWifis=a;updateConfiguredWifiInputs()})</script>";

const char PARAMS_HTML[] = "<!doctypehtml><style>body{background:#c3c3c3;font-size:40px}p{color:#ff7600;font-weight:bolder;font-size:60px}#scanned_ssids > li{margin-bottom:22px}#scanned_ssids > li > .ssid{cursor:pointer;font-weight:bolder}button{width:100%;min-height:80px;font-size:40px;border-radius:20px}input,option,select{min-height:80px;font-size:40px}.param-container{display:flex;margin-top:22px;align-items:center;justify-content:space-between}</style><body style=width:80%;margin-left:10%><p><span onclick=\"document.location = '/'\"style=cursor:pointer>< </span>app parameters<div id=params>fetching params</div><button onclick=save() style=margin-bottom:44px;margin-top:22px>save</button><script>let host = \"\"; let configuredParams = [];let fetching = true;const paramsDiv = document.querySelector(\"#params\");const fetchParams = () => {return fetch(host + \"/params-query\").then((response) => response.json()).then((response) => {console.log(response);fetching = false;return response;}).catch((e) => {console.warn(\"err occured..\", e);return undefined;});};fetchParams().then((response) => {console.log(\"fetchParams\", response);if (!response) return;const { params, n_params } = response;configuredParams = params;updateParamInputs();});const valueChange = (idx, inputId) => {const newValue = document.querySelector(`#${inputId}`)?.value;if (newValue == null) return;const param = configuredParams[idx];if (param == null) return;param[1] = newValue;configuredParams[idx] = param;};const buildParamInputs = () => {if (!configuredParams) return `nothing to do here.. :(`;const buildInput = (idx, key, value, typeWithOptions, maxLength) => {const paramId = `i_param_${idx}`;let [type, ...options] = typeWithOptions.split(\"|\");console.log(type, options);switch (type) {case \"int\":return `<input id=\"${paramId}\" type=\"number\" onchange=\"valueChange(${idx}, '${paramId}')\" value=\"${value}\" />`;case \"bool\":options = [\"true\", \"false\"];/* fall through! */case \"enum\":console.log(\"options\", options, value);if (!options?.length) return `invalid enum type`;return `<select id=\"${paramId}\" onchange=\"valueChange(${idx}, '${paramId}')\">${options.map((o) =>`<option ${o === value ? \"selected\" : \"\"} value=\"${o}\">${o}</option>`)}</select>`;}return `<input id=\"${paramId}\" onchange=\"valueChange(${idx}, '${paramId}')\" value=\"${value}\" maxlength=\"${maxLength}\" />`;};return configuredParams.map(([param_key,param_value,param_type,param_max_length,param_label,param_group,],idx) => {const label = param_label || param_group;console.log(\"label\", label);return `<div class=\"param-container\"><span style=\"min-width:10%\">${label}</span>${buildInput(idx,param_key,param_value,param_type,param_max_length)}</div>`;}).join(\"\");};const updateParamInputs = () => {paramsDiv.innerHTML = buildParamInputs();};const save = () => {if (fetching) return;const prepareParams = () => {return configuredParams.map(([key, val]) => {return [key, val];});};const params = prepareParams();console.warn(\"SAVE !!\", params);return fetch(host + \"/params-save\", {method: \"POST\",headers: {\"content-type\": \"application/json\",},body: JSON.stringify({params,}),}).then((response) => {console.log(response);document.location = \"/\";}).catch((e) => {console.warn(\"err occured..\", e);return undefined;});};</script>";

#endif  // __HTML_H__
